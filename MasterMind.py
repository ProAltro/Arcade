import random
import os
import sys
import time

def isIDLE():
   if "idlelib" in sys.modules:
      return True
   else:
      return False

def newscreen(n=105,t=0.6):
    print("\nLoading",end='')
    for i in range(3):
        sys.stdout.write('.')
        sys.stdout.flush()
        time.sleep(t)
    print()
    if isIDLE():
        print('-'*n)
    else:
        if os.name == 'posix':
            os.system('clear')
        else:
            os.system('cls')

def slowprint(s,t=0.025):
   for i in s:
      print(i,end='')
      if isIDLE():
         time.sleep(t)

def createDict(l):
    d = {}
    for i in range(4):
       temp = []
       for j in range(4):
          if l[i]==l[j]:
             temp.append(j)
       d[l[i]] = temp
    return d

def leveldisplay():
     print('Level - ',levelname[op],'\nThe code can have the following digits:\n',valid,sep='')
     print('-'*105)

lvl = {1:7,2:8,3:9,4:10}
levelname = {1:"Easy",2:"Medium",3:"Difficult",4:"Insane"}
code,codedisp,valid,plist,alist,op,counter=[],[],[],[],[],'',0

def initialize():
    global code,codedisp,plist,alist,op,counter,valid
    code = []
    valid = []
    codedisp = ['X','X','X','X']
    plist = []
    alist = []
    op = ''
    for i in range(10):
        plist.append(['-','-','-','-'])
        alist.append(['-','-','-','-']) 
    counter = 0

def getKey(v):
   for i,j in levelname.items():
      if j==v:
         return i
   return -1

def coder():
    global code,op,valid
    choose = '''Choose your level:
1 - Easy
2 - Medium
3 - Difficult
4 - Insane

Enter your choice: '''
    while True:
      if op=='':
         slowprint(choose)
      else:
         slowprint(choose,0.004)
      op = input()
      try:
         op = int(op)
      except:
         op = getKey(op.title().strip())
      if op not in levelname:
         print('-'*45)
         slowprint("ERROR")
         print("\n\nInvalid Choice! (Enter 1, 2, 3 or 4)")
         print('-'*45)
         time.sleep(1)
      else:
         break
    valid = [i for i in range(1,lvl[op])]
    for i in range(4):
        code.append(random.choice(valid))
    print('-'*45)
    slowprint("The code has been generated! Start Cracking!\n")

def board_rules():
    print('-'*105)            
    out = '┌───────┬─────┬─────┬─────┬─────┐\n'
    out += '│ Code: │'
    
    for i in codedisp:
        out += '  '+str(i)+'  │'
        
    out += '\tRules of the game:\n'
    out += '├───────┼─────┼─────┼─────┼─────┤\n'
    
    for i in range(1,11):
        
          out += '│ '+str(plist[-i][0])+'   '+ str(plist[-i][1])+' │     │     │     │     │'
          if i==1:
              out+= "\t1. Crack the 4 digit code (X X X X) generated by the computer.\n" 
          elif i==3:
              out+= "\t\tXXXX\n" 
          elif i==4:
              out+= "\t   the board, indicated by 2 pegs:\n" 
          elif i==5:
              out+= "\t\t\tFor every correct digit that is\n"
          elif i==6:
              out+= "\t\tii. Red Peg (R) -\n"
          else:
              out+='\n'
              
          out+= '│ '+str(plist[-i][2])+'   '+ str(plist[-i][3])+' │'
          
          for j in range(4):
              out+= '  '+str(alist[-i][j])+'  │'
          if i==2:
              out+= "\t3. The attempts can be entered in any of the following formats:\n"
          elif i==5:
              out+= "\t\t\tplaced in the wrong position.\n"
          elif i==6:
              out+= "\t\t\tFor every correct digit that is\n"
          elif i==7:
              out+= "\t5. The order of these pegs does NOT matter.\n"
          else:
              out+='\n'

          if i==10:
              out+='└───────┴─────┴─────┴─────┴─────┘\n'
          else:
              out+='├───────┼─────┼─────┼─────┼─────┤'
              if i==1:
                  out+= "\t2. Digits may or may not be repeated.\n"
              elif i==2:
                  out+= "\t\tX X X X\n"
              elif i==3:
                  out+= "\t4. After every attempt, clues will be given on the left side of\n"
              elif i==4:
                  out+= "\t\ti.  White Peg (W) -\n"
              elif i==6:
                  out+= "\t\t\tplaced in the correct position as well.\n"
              else:
                  out+='\n'
    print(out,end='')
    print('-'*105)

def board():
    print('-'*105)    
    out = ('┌───────┬─────┬─────┬─────┬─────┐\n')
    out+=('│ Code: │')
    for i in codedisp:
        out+=('  '+str(i)+'  │')
    out+=('\n├───────┼─────┼─────┼─────┼─────┤\n')
    for i in range(1,11):   
          out += ('│ '+str(plist[-i][0])+'   '+ str(plist[-i][1])+' │     │     │     │     │\n') 
          out+=('│ '+str(plist[-i][2])+'   '+ str(plist[-i][3])+' │')    
          for j in range(4):
              out+=('  '+str(alist[-i][j])+'  │')
          out += '\n'
          if i==10:
              out+=('└───────┴─────┴─────┴─────┴─────┘\n')
          else:
              out+=('├───────┼─────┼─────┼─────┼─────┤\n')
    print(out,end='')
    print('-'*105)
    
def breaker():
    global alist, plist
    pegs = []
    while True:
        slowprint("\nYour Attempt: ",0.02)
        ip = input()
        temp = []
        try:
           for i in ip:
              if i.isspace():
                 continue
              elif int(i) in [i for i in range(10)]:
                 temp.append(int(i))
        except:
           print('-'*105)
           slowprint("ERROR")
           print("\n\nInvalid Attempt! Please enter digits only!")
           print('-'*105)
           time.sleep(1)
           continue
        if len(temp) != 4:
           print('-'*105)
           slowprint("ERROR")
           print("\n\nInvalid Attempt! Please enter exactly 4 digits!")
           print('-'*105)
           time.sleep(1)
           continue
        attempt = []
        for i in temp:
           if i in valid:
              attempt.append(i)
           else:
              break
        if len(attempt) != 4:
           print('-'*105)
           slowprint("ERROR")
           print("\n\nInvalid Attempt! Please enter valid digits according to level!")
           print('-'*105)
           leveldisplay()
           time.sleep(1)
           continue
        else:
            alist[counter-1]=attempt
            break
   
    attemptdict = createDict(attempt)
    codedict = createDict(code)
    pegsd = {}

    for i,j in codedict.items():
          temp = []
          if i in attemptdict.keys():
             for a in j:
                if temp.count('R') != len(j):
                   if a in attemptdict[i]:
                         temp.append('R')
                   else:
                      if temp.count('W') != len(attemptdict[i]):
                         temp.append('W')
             pegsd[i] = sorted(temp)[:len(attemptdict[i])]

    for i in pegsd.values():
          pegs.extend(i)

    random.shuffle(pegs)
      
    while len(pegs) != 4:
          pegs.insert(0,'-')
          
    plist[counter-1]=pegs

def play():
    global codedisp,counter
    coder()
    while True:
        if code in alist or counter==10:
            newscreen()
            codedisp = code
            board()
            if code in alist:
               slowprint("Congratulations!\nYou cracked the code in only "+str(counter)+" attempts!\n")
            else:
               slowprint("Sorry, you have lost!\nThe correct code is displayed on the board!\n")
            newscreen(t=2)
            break
        counter+=1
        newscreen()
        board_rules()
        leveldisplay()
        slowprint("Attempt "+str(counter)+":\n")
        breaker()

ynl = ['y','ye','yes','yep','yup','yeah','yas','yass','yasss','yee',
       'n','no','nope','na','nah']

def PlayGame():
   slowprint('Welcome to MasterMind, The classic code-cracking game!\n',0.02)
   print('-'*105)
   slowprint('''1. The code-maker (Computer) will generate a 4 digit code (X X X X) based on the chosen level.
2. The code-breaker (You) has to break this code,
   by duplicating its exact digits and positions.
3. After every attempt,
   clues will be given on the left side of the board, indicated by 2 pegs:
\ti.  White Peg (W) - For every correct digit that is placed in the wrong position.
\tii. Red Peg (R)   - For every correct digit that is placed in the correct position as well.
4. A total of 10 attempts are allowed before the game is over, and the code is revealed.
5. The Aim of the game is to break the code with the least attempts.
''')
   print('-'*105)
   
   while True:
       initialize()
       play()
       while True:
           slowprint("Do you want to play MasterMind again? (y/n): ")
           f = input().lower().strip()
           if f in ynl:
               break
           else:
               slowprint("\nERROR\n\n")      
       if f in ynl[:10]:
           newscreen()
           continue
       else:
           newscreen()
           print("Thank you for playing MasterMind!\nGame created by: Chaitanya Keyal")
           print('-'*35)
           newscreen(n=35,t=1.5)
           break
